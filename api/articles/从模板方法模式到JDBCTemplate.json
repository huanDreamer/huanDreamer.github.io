{"title":"从模板方法模式到JDBCTemplate","slug":"从模板方法模式到JDBCTemplate","date":"2019-05-22T14:33:24.024Z","updated":"2019-05-30T00:52:25.419Z","comments":true,"path":"api/articles/从模板方法模式到JDBCTemplate.json","photos":[],"link":"","excerpt":"","covers":["https://user-gold-cdn.xitu.io/2019/5/21/16ad9448cb69de5e?imageView2/0/w/1280/h/960/ignore-error/1","https://user-gold-cdn.xitu.io/2019/5/21/16ad94b7aa8bb518?imageView2/0/w/1280/h/960/ignore-error/1"],"content":"<blockquote>\n<p>本文转载自 <a href=\"https://juejin.im/post/5cdb7f4af265da037371aa1f\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5cdb7f4af265da037371aa1f</a><br>将大象装进冰箱需要三步，那么老虎了？如何优雅的将大象装进冰箱？</p>\n</blockquote>\n<h3 id=\"把大象装进冰箱\"><a href=\"#把大象装进冰箱\" class=\"headerlink\" title=\"把大象装进冰箱\"></a>把大象装进冰箱</h3><table>\n<thead>\n<tr>\n<th align=\"center\">Step</th>\n<th align=\"center\">大象</th>\n<th align=\"center\">老虎</th>\n<th align=\"center\">…</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">First</td>\n<td align=\"center\">打开冰箱门</td>\n<td align=\"center\">打开冰箱门</td>\n<td align=\"center\">打开冰箱门</td>\n</tr>\n<tr>\n<td align=\"center\">Second</td>\n<td align=\"center\">把大象放进去</td>\n<td align=\"center\">把老虎放进去</td>\n<td align=\"center\">…</td>\n</tr>\n<tr>\n<td align=\"center\">Third</td>\n<td align=\"center\">关闭冰箱门</td>\n<td align=\"center\">关闭冰箱门</td>\n<td align=\"center\">关闭冰箱门</td>\n</tr>\n</tbody></table>\n<p><strong><em>大象类</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Elephant &#123;</span><br><span class=\"line\">        public void putRefrigerator() &#123;</span><br><span class=\"line\">            openDoor();</span><br><span class=\"line\">            putElephant();</span><br><span class=\"line\">            closeDoor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void openDoor() &#123;</span><br><span class=\"line\">            System.out.println(&quot;open the door&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void putElephant() &#123;</span><br><span class=\"line\">            System.out.println(&quot;put in the Elephant&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void closeDoor() &#123;</span><br><span class=\"line\">            System.out.println(&quot;close the door&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong><em>老虎类</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Tiger &#123;</span><br><span class=\"line\">        public void putRefrigerator() &#123;</span><br><span class=\"line\">            openDoor();</span><br><span class=\"line\">            putTiger();</span><br><span class=\"line\">            closeDoor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void openDoor() &#123;</span><br><span class=\"line\">            System.out.println(&quot;open the door&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void putTiger() &#123;</span><br><span class=\"line\">            System.out.println(&quot;put in the Tiger&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void closeDoor() &#123;</span><br><span class=\"line\">            System.out.println(&quot;close the door&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>可以看出我们将大象和老虎放进冰箱的过程中出现了大量的重复代码，这显然不是一个好的设计，如果我们在以后的系统升级过程中需要再放入长颈鹿怎么办，我们应该如何从我们的设计中删除这些重复代码？通过观察我们发现放大象和放老虎之间有很多共同点，都需要进行开关门的操作，只是放的过程不尽相同，我们是否可以将共同点抽离？我们一起试试看</p>\n<p><strong><em>抽象超类</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractPutAnyAnimal &#123;</span><br><span class=\"line\">        //这是一个模板方法，它是一个算法的模板，描述我们将动物放进冰箱的步骤，每一个方法代表了一个步骤</span><br><span class=\"line\">        public void putRefrigerator() &#123;</span><br><span class=\"line\">            openDoor();</span><br><span class=\"line\">            putAnyAnimal();</span><br><span class=\"line\">            closeDoor();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //在超类中实现共同的方法，由超类来处理</span><br><span class=\"line\">        public void openDoor() &#123;</span><br><span class=\"line\">            System.out.println(&quot;open the door&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void closeDoor() &#123;</span><br><span class=\"line\">            System.out.println(&quot;close the door&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //每个子类可能有不同的方法,我们定义成抽象方法让子类去实现</span><br><span class=\"line\">        abstract void putAnyAnimal();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong><em>大象类</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Elephant extends AbstractPutAnyAnimal &#123;</span><br><span class=\"line\">        //子类实现自己的业务逻辑</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        void putAnyAnimal() &#123;</span><br><span class=\"line\">            System.out.println(&quot;put in the Elephant&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong><em>老虎类</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Tiger extends AbstractPutAnyAnimal &#123;</span><br><span class=\"line\">        //子类实现自己的业务逻辑</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        void putAnyAnimal() &#123;</span><br><span class=\"line\">            System.out.println(&quot;put in the Tiger&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>通过将相同的方法抽离到超类中，并定义一个抽象方法供子类提供不同的实现，事实上我们刚刚实现了一个模板方法模式。</p>\n<h3 id=\"模板方法模式定义？\"><a href=\"#模板方法模式定义？\" class=\"headerlink\" title=\"模板方法模式定义？\"></a>模板方法模式定义？</h3><p><strong>模板方法模式定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现</strong>，putRefrigerator 方法定义了我们将大象装进冰箱的步骤它就是一个模板方法。<strong>模板方法模式在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不在改变算法结构的情况下，重新定义算法的某些步骤</strong>（子类提供自己的实现）</p>\n<h3 id=\"模板方法模式中的钩子\"><a href=\"#模板方法模式中的钩子\" class=\"headerlink\" title=\"模板方法模式中的钩子\"></a>模板方法模式中的钩子</h3><p>我们可以在超类中定义一个空方法，我们称这种方法为钩子（hook）。子类可以依据情况选择覆盖，钩子的存在可以让子类有能力对算法的不同点进行挂载；<strong>钩子可以让子类实现算法中的可选部分，钩子也可以让子类为抽象类做一些决定</strong>我们将大象装进冰箱后可能会想调整冰箱温度，也可能什么都不做使用默认温度，我们可以通过定义一个钩子，让子类来选择是否调整温度，如下：</p>\n<p><strong><em>抽象父类</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class AbstractPutAnyAnimal &#123;</span><br><span class=\"line\">        public void putRefrigerator() &#123;</span><br><span class=\"line\">            openDoor();</span><br><span class=\"line\">            putAnyAnimal();</span><br><span class=\"line\">            closeDoor();</span><br><span class=\"line\">            //默认为false,重新这个方法决定是否执行addTemperature();方法</span><br><span class=\"line\">            if (isAdd()) &#123;</span><br><span class=\"line\">                addTemperature();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void openDoor() &#123;</span><br><span class=\"line\">            System.out.println(&quot;open the door&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void closeDoor() &#123;</span><br><span class=\"line\">            System.out.println(&quot;close the door&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        abstract void putAnyAnimal();</span><br><span class=\"line\">        void addTemperature()&#123;</span><br><span class=\"line\">            System.out.println(&quot;plus one&quot;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        //定义一个空实现，由子类决定是否对其进行实现</span><br><span class=\"line\">        boolean isAdd()&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong><em>大象类</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Elephant extends AbstractPutAnyAnimal &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        void putAnyAnimal() &#123;</span><br><span class=\"line\">            System.out.println(&quot;put in the Elephant&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //子类实现钩子方法</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        boolean isAdd() &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>我们通过定义一个钩子方法，子类选择是否实现这个钩子方法，来决定是否调整温度；当然钩子方法的用途不止如此，<strong>它还能让子类有机会对模板中即将发生或刚刚发生的步骤做出反应</strong>，这在JDK中有很多的例子，甚至在前端开发领域也有很多例子，我就不具体展开代码演示了，后面在模板方法模式的更多应用中展开。</p>\n<p>JDK以及Spring中使用了很多的设计模式，下面我们通过比较传统JDBC编程和JDBCTemplate来看看模板方法模式是如何帮我们消除样板代码的</p>\n<h3 id=\"传统JDBC编程\"><a href=\"#传统JDBC编程\" class=\"headerlink\" title=\"传统JDBC编程\"></a>传统JDBC编程</h3><p><strong><em>JDBC编程之新增</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String driver = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class=\"line\">        String url = &quot;jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&amp;amp;useSSL=true&quot;;</span><br><span class=\"line\">        String username = &quot;root&quot;;</span><br><span class=\"line\">        String password = &quot;1234&quot;;</span><br><span class=\"line\">        Connection connection = null;</span><br><span class=\"line\">        Statement statement = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Class.forName(driver);</span><br><span class=\"line\">            connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\">            String sql = &quot;insert into users(nickname,comment,age) values(&apos;小小谭&apos;,&apos;I love three thousand times&apos;, &apos;21&apos;)&quot;;</span><br><span class=\"line\">            statement = connection.createStatement();</span><br><span class=\"line\">            int i = statement.executeUpdate(sql);</span><br><span class=\"line\">            return i;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (null != statement) &#123;</span><br><span class=\"line\">                    statement.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (null != connection) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                throw new RuntimeException(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 0;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong><em>JDBC编程之查询</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String driver = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class=\"line\">        String url = &quot;jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&amp;amp;useSSL=true&quot;;</span><br><span class=\"line\">        String username = &quot;root&quot;;</span><br><span class=\"line\">        String password = &quot;1234&quot;;</span><br><span class=\"line\">        Connection connection = null;</span><br><span class=\"line\">        Statement statement = null;</span><br><span class=\"line\">        try&#123;</span><br><span class=\"line\">            Class.forName(driver);</span><br><span class=\"line\">            connection = DriverManager.getConnection(url, username, password);</span><br><span class=\"line\">            String sql = &quot;select nickname,comment,age from users&quot;;</span><br><span class=\"line\">            statement = connection.createStatement();</span><br><span class=\"line\">            ResultSet resultSet = statement.executeQuery(sql);</span><br><span class=\"line\">            List&lt;Users&gt; usersList = new ArrayList&lt;&gt;();</span><br><span class=\"line\">            while (resultSet.next()) &#123;</span><br><span class=\"line\">                Users users = new Users();</span><br><span class=\"line\">                users.setNickname(resultSet.getString(1));</span><br><span class=\"line\">                users.setComment(resultSet.getString(2));</span><br><span class=\"line\">                users.setAge(resultSet.getInt(3));</span><br><span class=\"line\">                usersList.add(users);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return usersList;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (null != statement) &#123;</span><br><span class=\"line\">                    statement.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (null != connection) &#123;</span><br><span class=\"line\">                    connection.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                throw new RuntimeException(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br></pre></td></tr></table></figure></div>\n\n<p>上面给出了我们在传统JDBC编程中的两个案例，可以看到传统JDBC的很多缺点，当然在实际项目中我们可能不会这么原始的进行数据库开发，可能会对JDBC进行一定的封装，方便我们的使用。Spring 官方为了简化JDBC的开发也发布了JDBCTemplate，下面我们就看一下它是如何简化开发的，以及模板方法模式在其中的应用</p>\n<h3 id=\"JDBCTemplate是个啥，它到底简化了什么？\"><a href=\"#JDBCTemplate是个啥，它到底简化了什么？\" class=\"headerlink\" title=\"JDBCTemplate是个啥，它到底简化了什么？\"></a>JDBCTemplate是个啥，它到底简化了什么？</h3><p>从JDBCTemplate的名字我们就不难看出，它简化了我们JDBC的开发，而且很可能大量应用了模板方法模式，它到底为我们提供了什么？<strong>它提供了与平台无光的异常处理机制</strong>。使用过原生JDBC开发的同学可能有经历，几乎所有的操作代码都需要我们强制捕获异常，但是在出现异常时我们往往无法通过异常读懂错误。Spring解决了我们的问题它<strong>提供了多个数据访问异常，并且分别描述了他们抛出时对应的问题，同时对异常进行了包装不强制要求我们进行捕获，同时它为我们提供了数据访问的模板化</strong>，从上面的传统JDBC编程我们可以发现，很多操作其实是重复的不变得比如事务控制、资源的获取关闭以及异常处理等，同时结果集的处理实体的绑定，参数的绑定这些东西都是特有的。因此<strong>Spring将数据访问过程中固定部分和可变部分划分为了两个不同的类(Template)和回调(Callback),模板处理过程中不变得部分，回调处理自定义的访问代码</strong>；下面我们具体通过源码来学学习一下</p>\n<h3 id=\"模板方法模式在JDBCTemplate中的应用\"><a href=\"#模板方法模式在JDBCTemplate中的应用\" class=\"headerlink\" title=\"模板方法模式在JDBCTemplate中的应用\"></a>模板方法模式在JDBCTemplate中的应用</h3><p>我所使用的版本是5.1.5.RELEASE</p>\n<p>打开JdbcTemplate类(我这里就不截图了，截图可能不清晰我直接将代码copy出来)：</p>\n<p><strong><em>JdbcTemplate</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class JdbcTemplate extends JdbcAccessor implements JdbcOperations &#123;</span><br><span class=\"line\">        //查询前缀</span><br><span class=\"line\">        private static final String RETURN_RESULT_SET_PREFIX = &quot;#result-set-&quot;;</span><br><span class=\"line\">        //计数前缀</span><br><span class=\"line\">        private static final String RETURN_UPDATE_COUNT_PREFIX = &quot;#update-count-&quot;;</span><br><span class=\"line\">        //是否跳过警告</span><br><span class=\"line\">        private boolean ignoreWarnings = true;</span><br><span class=\"line\">        //查询大小</span><br><span class=\"line\">        private int fetchSize = -1;</span><br><span class=\"line\">        //最大行</span><br><span class=\"line\">        private int maxRows = -1;</span><br><span class=\"line\">        //查询超时</span><br><span class=\"line\">        private int queryTimeout = -1;</span><br><span class=\"line\">        //是否跳过结果集处理</span><br><span class=\"line\">        private boolean skipResultsProcessing = false;</span><br><span class=\"line\">        //是否跳过非公共结果集处理</span><br><span class=\"line\">        private boolean skipUndeclaredResults = false;</span><br><span class=\"line\">        //map结果集是否大小写敏感</span><br><span class=\"line\">        private boolean resultsMapCaseInsensitive = false;</span><br><span class=\"line\">    </span><br><span class=\"line\">        public JdbcTemplate() &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //调用父类方法设置数据源和其他参数</span><br><span class=\"line\">        public JdbcTemplate(DataSource dataSource) &#123;</span><br><span class=\"line\">            this.setDataSource(dataSource);</span><br><span class=\"line\">            this.afterPropertiesSet();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //调用父类方法设置数据源，懒加载策略和其他参数</span><br><span class=\"line\">        public JdbcTemplate(DataSource dataSource, boolean lazyInit) &#123;</span><br><span class=\"line\">            this.setDataSource(dataSource);</span><br><span class=\"line\">            this.setLazyInit(lazyInit);</span><br><span class=\"line\">            this.afterPropertiesSet();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>JdbcTemplate 继承了JdbcAccessor实现了JdbcOperations，JdbcAccessor主要封装了数据源的操作，JdbcOperations主要定义了一些操作接口。我们一起看一下JdbcOperations类；</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class JdbcAccessor implements InitializingBean &#123;</span><br><span class=\"line\">        protected final Log logger = LogFactory.getLog(this.getClass());</span><br><span class=\"line\">        //数据源</span><br><span class=\"line\">        @Nullable</span><br><span class=\"line\">        private DataSource dataSource;</span><br><span class=\"line\">        //异常翻译</span><br><span class=\"line\">        @Nullable</span><br><span class=\"line\">        private volatile SQLExceptionTranslator exceptionTranslator;</span><br><span class=\"line\">        //懒加载策略</span><br><span class=\"line\">        private boolean lazyInit = true;</span><br><span class=\"line\">        public JdbcAccessor() &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void setDataSource(@Nullable DataSource dataSource) &#123;</span><br><span class=\"line\">            this.dataSource = dataSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        @Nullable</span><br><span class=\"line\">        public DataSource getDataSource() &#123;</span><br><span class=\"line\">            return this.dataSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        protected DataSource obtainDataSource() &#123;</span><br><span class=\"line\">            DataSource dataSource = this.getDataSource();</span><br><span class=\"line\">            Assert.state(dataSource != null, &quot;No DataSource set&quot;);</span><br><span class=\"line\">            return dataSource;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void setDatabaseProductName(String dbName) &#123;</span><br><span class=\"line\">            this.exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dbName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public void setExceptionTranslator(SQLExceptionTranslator exceptionTranslator) &#123;</span><br><span class=\"line\">            this.exceptionTranslator = exceptionTranslator;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>之所以<strong>前面提到spring让我们更方便的处理异常就是这里他包装了一个SQLExceptionTranslator</strong>，其他的代码都是做数据源的检查之类的设置数据源，我们看一下其中getExceptionTranslator()方法</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public SQLExceptionTranslator getExceptionTranslator() &#123;</span><br><span class=\"line\">        SQLExceptionTranslator exceptionTranslator = this.exceptionTranslator;</span><br><span class=\"line\">        if (exceptionTranslator != null) &#123;</span><br><span class=\"line\">            return exceptionTranslator;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            synchronized(this) &#123;</span><br><span class=\"line\">                SQLExceptionTranslator exceptionTranslator = this.exceptionTranslator;</span><br><span class=\"line\">                if (exceptionTranslator == null) &#123;</span><br><span class=\"line\">                    DataSource dataSource = this.getDataSource();</span><br><span class=\"line\">                    if (dataSource != null) &#123;</span><br><span class=\"line\">                        exceptionTranslator = new SQLErrorCodeSQLExceptionTranslator(dataSource);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        exceptionTranslator = new SQLStateSQLExceptionTranslator();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    this.exceptionTranslator = (SQLExceptionTranslator)exceptionTranslator;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return (SQLExceptionTranslator)exceptionTranslator;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>这是一个标准的单例模式，我们在学习模板方法模式的路途中有捕获了一个野生的单例；我们继续看JdbcOperations接口我们调其中一个接口进行解析；</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Nullable</span><br><span class=\"line\">    &lt;T&gt; T execute(StatementCallback&lt;T&gt; var1) throws DataAccessException;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong><em>StatementCallback 接口</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@FunctionalInterface</span><br><span class=\"line\">    public interface StatementCallback&lt;T&gt; &#123;</span><br><span class=\"line\">        @Nullable</span><br><span class=\"line\">        T doInStatement(Statement var1) throws SQLException, DataAccessException;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong><em>execute实现</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Nullable</span><br><span class=\"line\">    public &lt;T&gt; T execute(StatementCallback&lt;T&gt; action) throws DataAccessException &#123;</span><br><span class=\"line\">        //参数检查</span><br><span class=\"line\">        Assert.notNull(action, &quot;Callback object must not be null&quot;);</span><br><span class=\"line\">        //获取连接</span><br><span class=\"line\">        Connection con = DataSourceUtils.getConnection(this.obtainDataSource());</span><br><span class=\"line\">        Statement stmt = null;</span><br><span class=\"line\">        Object var11;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //创建一个Statement</span><br><span class=\"line\">            stmt = con.createStatement();</span><br><span class=\"line\">            //设置查询超时时间，最大行等参数（就是一开始那些成员变量）</span><br><span class=\"line\">            this.applyStatementSettings(stmt);</span><br><span class=\"line\">            //执行回调方法获取结果集</span><br><span class=\"line\">            T result = action.doInStatement(stmt);</span><br><span class=\"line\">            //处理警告</span><br><span class=\"line\">            this.handleWarnings(stmt);</span><br><span class=\"line\">            var11 = result;</span><br><span class=\"line\">        &#125; catch (SQLException var9) &#123;</span><br><span class=\"line\">            //出现错误优雅退出</span><br><span class=\"line\">            String sql = getSql(action);</span><br><span class=\"line\">            JdbcUtils.closeStatement(stmt);</span><br><span class=\"line\">            stmt = null;</span><br><span class=\"line\">            DataSourceUtils.releaseConnection(con, this.getDataSource());</span><br><span class=\"line\">            con = null;</span><br><span class=\"line\">            throw this.translateException(&quot;StatementCallback&quot;, sql, var9);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            JdbcUtils.closeStatement(stmt);</span><br><span class=\"line\">            DataSourceUtils.releaseConnection(con, this.getDataSource());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return var11;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>这一个方法可谓是展现的淋漓尽致，这是一个典型的模板方法+回调模式，我们不需要再写过多的重复代码只需要实现自己获取result的方法就好（StatementCallback）事实上我们自己也不需要实现这个方法，继续向上看，我们是如何调用execute方法的，以查询为例,我们看他是如何一步步调用的：</p>\n<p><strong><em>查询方法</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;Users&gt; findAll() &#123;</span><br><span class=\"line\">        JdbcTemplate jdbcTemplate = DataSourceConfig.getTemplate();</span><br><span class=\"line\">        String sql = &quot;select nickname,comment,age from users&quot;;</span><br><span class=\"line\">        return jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;Users&gt;(Users.class));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><strong><em>query实现</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;T&gt; List&lt;T&gt; query(String sql, RowMapper&lt;T&gt; rowMapper) throws DataAccessException &#123;</span><br><span class=\"line\">        return (List)result(this.query((String)sql, (ResultSetExtractor)(new RowMapperResultSetExtractor(rowMapper))));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>这里的RowMapper是负责将结果集中一行的数据映射成实体返回，用到了反射技术，这里就不展开了，有兴趣的同学可以自己打开源码阅读，继续向下：</p>\n<p><strong><em>query实现</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Nullable</span><br><span class=\"line\">    public &lt;T&gt; T query(final String sql, final ResultSetExtractor&lt;T&gt; rse) throws DataAccessException &#123;</span><br><span class=\"line\">        Assert.notNull(sql, &quot;SQL must not be null&quot;);</span><br><span class=\"line\">        Assert.notNull(rse, &quot;ResultSetExtractor must not be null&quot;);</span><br><span class=\"line\">        if (this.logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            this.logger.debug(&quot;Executing SQL query [&quot; + sql + &quot;]&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //实现回调接口</span><br><span class=\"line\">        class QueryStatementCallback implements StatementCallback&lt;T&gt;, SqlProvider &#123;</span><br><span class=\"line\">            QueryStatementCallback() &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            @Nullable</span><br><span class=\"line\">            public T doInStatement(Statement stmt) throws SQLException &#123;</span><br><span class=\"line\">                ResultSet rs = null;</span><br><span class=\"line\">                Object var3;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    //这里真正的执行我们的sql语句</span><br><span class=\"line\">                    rs = stmt.executeQuery(sql);</span><br><span class=\"line\">                    //处理对象映射</span><br><span class=\"line\">                    var3 = rse.extractData(rs);</span><br><span class=\"line\">                &#125; finally &#123;</span><br><span class=\"line\">                    JdbcUtils.closeResultSet(rs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return var3;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            public String getSql() &#123;</span><br><span class=\"line\">                return sql;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //调用execute接口</span><br><span class=\"line\">        return this.execute((StatementCallback)(new QueryStatementCallback()));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>看到这里相信你也不得拍手称奇，Spring处理的非常巧妙，请继续向下看：</p>\n<p><strong><em>update详解</em></strong></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected int update(PreparedStatementCreator psc, @Nullable PreparedStatementSetter pss) throws DataAccessException &#123;</span><br><span class=\"line\">        this.logger.debug(&quot;Executing prepared SQL update&quot;);</span><br><span class=\"line\">        return updateCount((Integer)this.execute(psc, (ps) -&gt; &#123;</span><br><span class=\"line\">            Integer var4;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (pss != null) &#123;</span><br><span class=\"line\">                    pss.setValues(ps);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                int rows = ps.executeUpdate();</span><br><span class=\"line\">                if (this.logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">                    this.logger.trace(&quot;SQL update affected &quot; + rows + &quot; rows&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                var4 = rows;</span><br><span class=\"line\">            &#125; finally &#123;</span><br><span class=\"line\">                if (pss instanceof ParameterDisposer) &#123;</span><br><span class=\"line\">                    ((ParameterDisposer)pss).cleanupParameters();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return var4;</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>为什么我要把update函数拎出来讲了，因为update这里使用了lambda函数,回想我们StatementCallback定义只有一个方法的接口，他就是一个函数是接口，所以他是一个函数式接口，所以这里直接使用lambda语法，<strong>lambda函数允许你直接内连，为函数接口的抽象方法提供实现，并且整个表达式作为函数接口的一个实例</strong>。我们在平时学习中可能知道了lambda语法但是可能使用的较少，或者不知道如何用于实战，那么多阅读源码一定可以提升你的实战能力。 我们可以看到JDBCTemplate使用了很多回调。为什么要用回调（Callback)?<strong>如果父类有多个抽象方法，子类需要全部实现这样特别麻烦，而有时候某个子类只需要定制父类中的某一个方法该怎么办呢？这个时候就要用到Callback回调了就可以完美解决这个问题</strong>，可以发现JDBCTemplate并没有完全拘泥于模板方法，非常灵活。我们在实际开发中也可以借鉴这种方法。</p>\n<h3 id=\"模板方法模式的更多应用\"><a href=\"#模板方法模式的更多应用\" class=\"headerlink\" title=\"模板方法模式的更多应用\"></a>模板方法模式的更多应用</h3><p>事实上很多有关生命周期的类都用到了模板方法模式，最典型的也是可能我们最熟悉的莫过于Servlet了，废话不多说上源码</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class HttpServlet extends GenericServlet</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></div>\n\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/5/21/16ad9448cb69de5e?imageView2/0/w/1280/h/960/ignore-error/1\" alt> HttpServlet的所有方法，我们看到HttpServlet继承了GenericServlet，我们继续看：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public abstract class GenericServlet </span><br><span class=\"line\">    implements Servlet, ServletConfig, java.io.Serializable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private static final String LSTRING_FILE = &quot;javax.servlet.LocalStrings&quot;;</span><br><span class=\"line\">    private static ResourceBundle lStrings =</span><br><span class=\"line\">        ResourceBundle.getBundle(LSTRING_FILE);</span><br><span class=\"line\"></span><br><span class=\"line\">    private transient ServletConfig config;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public GenericServlet() &#123; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //没有实现钩子</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public String getInitParameter(String name) &#123;</span><br><span class=\"line\">        ServletConfig sc = getServletConfig();</span><br><span class=\"line\">        if (sc == null) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(</span><br><span class=\"line\">                lStrings.getString(&quot;err.servlet_config_not_initialized&quot;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return sc.getInitParameter(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Enumeration&lt;String&gt; getInitParameterNames() &#123;</span><br><span class=\"line\">        ServletConfig sc = getServletConfig();</span><br><span class=\"line\">        if (sc == null) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(</span><br><span class=\"line\">                lStrings.getString(&quot;err.servlet_config_not_initialized&quot;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return sc.getInitParameterNames();</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">     </span><br><span class=\"line\">    public ServletConfig getServletConfig() &#123;</span><br><span class=\"line\">\treturn config;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public ServletContext getServletContext() &#123;</span><br><span class=\"line\">        ServletConfig sc = getServletConfig();</span><br><span class=\"line\">        if (sc == null) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(</span><br><span class=\"line\">                lStrings.getString(&quot;err.servlet_config_not_initialized&quot;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return sc.getServletContext();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getServletInfo() &#123;</span><br><span class=\"line\">\treturn &quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void init(ServletConfig config) throws ServletException &#123;</span><br><span class=\"line\">\tthis.config = config;</span><br><span class=\"line\">\tthis.init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void init() throws ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public void log(String msg) &#123;</span><br><span class=\"line\">\tgetServletContext().log(getServletName() + &quot;: &quot;+ msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    public void log(String message, Throwable t) &#123;</span><br><span class=\"line\">\tgetServletContext().log(getServletName() + &quot;: &quot; + message, t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public abstract void service(ServletRequest req, ServletResponse res)</span><br><span class=\"line\">\tthrows ServletException, IOException;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public String getServletName() &#123;</span><br><span class=\"line\">        ServletConfig sc = getServletConfig();</span><br><span class=\"line\">        if (sc == null) &#123;</span><br><span class=\"line\">            throw new IllegalStateException(</span><br><span class=\"line\">                lStrings.getString(&quot;err.servlet_config_not_initialized&quot;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return sc.getServletName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>可以看到这就是个典型的模板方法类蛮，而且钩子函数也在这里展现的淋漓尽致，如init、destroy方法等，JDK中很多类都是用了模板方法等着你发现哦。</p>\n<h3 id=\"模板方法模式在Vue-js中的应用\"><a href=\"#模板方法模式在Vue-js中的应用\" class=\"headerlink\" title=\"模板方法模式在Vue.js中的应用\"></a>模板方法模式在Vue.js中的应用</h3><p>模板方法模式在其他语言中也有实现比如Vue.js、React中；比如Vue生命周期肯定使用了模板方法，我就不对源码展开分析了。<br><img src=\"https://user-gold-cdn.xitu.io/2019/5/21/16ad94b7aa8bb518?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>设计模式在Spring中得到了大量的应用，感兴趣的同学可以看看Spring源码加以学习，如果你觉得我写的还不错的话点个赞吧，如果你发现了错误，或者不好的地方也可以及时告诉我加以改正，谢谢！您的赞赏和批评是进步路上的好伙伴。</p>\n","categories":[],"tags":[{"name":"Java","slug":"Java","count":26,"path":"api/tags/Java.json"}]}