{"title":"Linux生产环境上，最常用的一套“AWK“技巧","slug":"Linux生产环境上，最常用的一套“AWK“技巧","date":"2019-06-20T09:56:51.051Z","updated":"2019-06-20T09:56:52.037Z","comments":true,"path":"api/articles/Linux生产环境上，最常用的一套“AWK“技巧.json","photos":[],"link":"","excerpt":"","covers":["https://user-gold-cdn.xitu.io/2019/6/20/16b7424643b79faa?imageView2/0/w/1280/h/960/ignore-error/1","https://user-gold-cdn.xitu.io/2019/6/20/16b7424af6eabdd0?imageView2/0/w/1280/h/960/ignore-error/1","https://user-gold-cdn.xitu.io/2019/6/20/16b7424e94105932?imageView2/0/w/1280/h/960/ignore-error/1","https://user-gold-cdn.xitu.io/2019/6/17/16b64cb6e60d3b3a?imageView2/0/w/1280/h/960/ignore-error/1"],"content":"<blockquote>\n<p>本文转载自 <a href=\"https://juejin.im/post/5d0b4ca1f265da1bbc6fdb9e\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d0b4ca1f265da1bbc6fdb9e</a> </p>\n</blockquote>\n<p>hi，大家好，小姐姐味道最有用系列完结。记得多多转发，点赞哦。</p>\n<p>最有用系列：</p>\n<p><a href=\"https://juejin.im/post/5bfa4211e51d4550184546ea\" target=\"_blank\" rel=\"noopener\">《Linux生产环境上，最常用的一套“vim“技巧》</a></p>\n<p><a href=\"https://juejin.im/post/5ce5190b5188252dbb08baa8\" target=\"_blank\" rel=\"noopener\">《Linux生产环境上，最常用的一套“Sed“技巧》</a></p>\n<p><a href=\"https://juejin.im/post/5d0b4ca1f265da1bbc6fdb9e\" target=\"_blank\" rel=\"noopener\">《Linux生产环境上，最常用的一套“AWK“技巧》</a></p>\n<p><a href=\"https://juejin.im/post/5cf5cb8c6fb9a07ef2010cb1\" target=\"_blank\" rel=\"noopener\">《”Sed” 高级功能：我这小脑瓜都快绕晕了》</a></p>\n<p>敢用自己的名字做软件名字的，都有非常强大的自信。比如，垠语言什么的。</p>\n<p><code>awk</code>的命名得自于它的三个创始人姓别的首字母，都是<code>80来岁</code>的老爷爷了。当然也有四个人的组合：流行的GoF设计模式。但对于我这游戏爱好者来说，想到的竟然是三位一体，果然是不争气啊。</p>\n<p>它长的很像C，为什么这么有名，除了它强大的功能，我们姑且认为<code>a</code>这个字母比较靠前吧。<code>awk</code>比<code>sed</code>简单，它更像一门编程语言。</p>\n<h1 id=\"打印某一列\"><a href=\"#打印某一列\" class=\"headerlink\" title=\"打印某一列\"></a>打印某一列</h1><p>下面，这几行代码的效果基本是相同的：打印文件中的第一列。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Java</span><br><span class=\"line\">System.out.println(aStr.split(&quot; &quot;)[0]);</span><br><span class=\"line\"></span><br><span class=\"line\">#Python</span><br><span class=\"line\">print(aString.split(&quot; &quot;)[0])</span><br><span class=\"line\"></span><br><span class=\"line\">#cut 命令</span><br><span class=\"line\">cut -d &quot; &quot; -f1   file</span><br><span class=\"line\"></span><br><span class=\"line\">#awk命令</span><br><span class=\"line\">awk &apos;&#123;print $1&#125;&apos; file</span><br></pre></td></tr></table></figure></div>\n\n<p>这可能是awk最常用的功能了：<strong>打印文件中的某一列</strong>。它智能的去切分你的数据，不管是<code>空格</code>，还是<code>TAB</code>，大概率是你想要的。</p>\n<p>对于csv这种文件来说，分隔的字符是<code>,</code>。AWK使用<code>-F</code>参数去指定。以下代码打印csv文件中的第1和第2列。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F &quot;,&quot;  &apos;&#123;print $1,$2&#125;&apos; file</span><br></pre></td></tr></table></figure></div>\n\n<p>由此，我们可以看出一个基本的awk命令的组成部分。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/6/20/16b7424643b79faa?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n<p><strong>一般的开发语言，数组下标是以0开始的，但awk的列<code>$</code>是以<code>1</code>开始的，而<code>0</code>指的是原始字符串。</strong></p>\n<h1 id=\"网络状态统计\"><a href=\"#网络状态统计\" class=\"headerlink\" title=\"网络状态统计\"></a>网络状态统计</h1><p>本小节，采用awk统计netstat命令的一些网络状态，来看一下awk语言的基本要素。netstat的输出类似于：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/6/20/16b7424af6eabdd0?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n<p>其中，第6列，标明了网络连接所处于的网络状态。我们先给出awk命令，看一下统计结果。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat  -ant | </span><br><span class=\"line\">awk &apos; \\</span><br><span class=\"line\">    BEGIN&#123;print  &quot;State&quot;,&quot;Count&quot; &#125;  \\</span><br><span class=\"line\">    /^tcp/ \\</span><br><span class=\"line\">    &#123; rt[$6]++ &#125; \\</span><br><span class=\"line\">    END&#123;  for(i in rt)&#123;print i,rt[i]&#125;  &#125;&apos;</span><br></pre></td></tr></table></figure></div>\n\n<p>输出结果为：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">State Count</span><br><span class=\"line\">LAST_ACK 1</span><br><span class=\"line\">LISTEN 64</span><br><span class=\"line\">CLOSE_WAIT 43</span><br><span class=\"line\">ESTABLISHED 719</span><br><span class=\"line\">SYN_SENT 5</span><br><span class=\"line\">TIME_WAIT 146</span><br></pre></td></tr></table></figure></div>\n\n<p>下面这张图会配合以上命令详细说明，希望你能了解awk的精髓。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/6/20/16b7424e94105932?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n<p>乍一看，好吓人的命令，但是很简单。awk和我们通常的程序不太一样，它分为四个部分。</p>\n<p>1、<strong>BEGIN 开头部分</strong>，可选的。用来设置一些参数，输出一些表头，定义一些变量等。上面的命令仅打印了一行信息而已。</p>\n<p>2、<strong>END 结尾部分</strong>，可选的。用来计算一些汇总逻辑，或者输出这些内容。上面的命令，使用简单的for循环，输出了数组rt中的内容。</p>\n<p>3、<strong>Pattern 匹配部分</strong>，依然可选。用来匹配一些需要处理的行。上面的命令，只匹配tcp开头的行，其他的不进入处理。</p>\n<p>4、<strong>Action 模块</strong>。主要逻辑体，按行处理，统计打印，都可以。</p>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>1、awk的主程序部分使用单引号‘包围，而不能是双引号 2、awk的列开始的index是0，而不是1</p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>我们从几个简单的例子，来看下awk的作用。</p>\n<p>1、输出Recv-Q不为0的记录</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ant | awk &apos;$2 &gt; 0 &#123;print&#125;&apos;</span><br></pre></td></tr></table></figure></div>\n\n<p>2、外网连接数，根据ip分组</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ant | awk &apos;/^tcp/&#123;print $4&#125;&apos; | awk -F: &apos;!/^:/&#123;print $1&#125;&apos; | sort | uniq -c</span><br></pre></td></tr></table></figure></div>\n\n<p>3、打印RSS物理内存占用</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -b -n 1 | awk &apos;NR&gt;7&#123;rss+=$6&#125;END&#123;print rss&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>4、过滤（去掉）空白行</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &apos;NF&apos; file</span><br></pre></td></tr></table></figure></div>\n\n<p>5、打印奇数行</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &apos;a=!a&apos; file</span><br></pre></td></tr></table></figure></div>\n\n<p>6、输出行数</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk &apos;END&#123;print NR&#125;&apos; file</span><br></pre></td></tr></table></figure></div>\n\n<p>这些命令，是需要了解awk的一些内部变量的，接下来我们来介绍。</p>\n<h1 id=\"内置变量\"><a href=\"#内置变量\" class=\"headerlink\" title=\"内置变量\"></a>内置变量</h1><h2 id=\"FS\"><a href=\"#FS\" class=\"headerlink\" title=\"FS\"></a>FS</h2><p>下面的两个命令是等价的 。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F &apos;:&apos;  &apos;&#123;print $3&#125;&apos; file</span><br><span class=\"line\">awk &apos;BEGIN&#123;FS=&quot;:&quot;&#125;&#123;print $3&#125;&apos; file</span><br></pre></td></tr></table></figure></div>\n\n<p>/<em>/</em>BEGIN块中的<code>FS</code>，就是内部变量，可以直接指定或者输出。/<em>/</em>如果你的文件既有用<code>,</code>分隔的，也有用<code>:</code>分割的，FS甚至可以指定多个分隔符同时起作用。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FS=&quot;[,:|]&quot;</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p><strong>OFS</strong> 指定输出内容的分割符，列数非常多的时候，简化操作。相似命令：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F &apos;:&apos; &apos;&#123;print $1,&quot;-&quot;,$2,&quot;-&quot;,$4&#125;&apos; file</span><br><span class=\"line\">awk &apos;BEGIN&#123;FS=&quot;:&quot;;OFS=&quot;-&quot;&#125;&#123;print $1,$2,$4&#125;&apos; file</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>NF</strong> 列数。非常有用，比如，过滤一些列数不满足条件的内容。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">awk -F, &apos;&#123;if(NF==3)&#123;print&#125;&#125;&apos; file</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>NR</strong> 行号，例如，下面两个命令是等价的。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat -n file</span><br><span class=\"line\">awk &apos;&#123;print NR,$0&#125;&apos; file</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>RS</strong> 记录分隔标志 <strong>ORS</strong> 指定记录输出的分隔标志</p>\n<p><strong>FILENAME</strong> 当前处理的文件名称，在一次性处理多个文件时非常有用</p>\n<h2 id=\"编程语言特性\"><a href=\"#编程语言特性\" class=\"headerlink\" title=\"编程语言特性\"></a>编程语言特性</h2><h3 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h3><p>从上面的代码可以看出，awk可以做一些简单的运算。它的语言简洁，不需要显示的定义变量的类型。</p>\n<p>比如上面的<code>rt[$6]++</code>，就已经默认定义了一个叫做rt的hash(array?)，里面的key是网络状态，而value是可以进行运算的(+-/*/%)。</p>\n<p>包含一些内置的数学运算（有限)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int</span><br><span class=\"line\">log</span><br><span class=\"line\">sqrt</span><br><span class=\"line\">exp</span><br><span class=\"line\">sin</span><br><span class=\"line\">cos</span><br><span class=\"line\">atan2</span><br><span class=\"line\">rand</span><br><span class=\"line\">srand</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"字符串操作\"><a href=\"#字符串操作\" class=\"headerlink\" title=\"字符串操作\"></a>字符串操作</h3><p>类似其他语言，awk也内置了很多字符串操作函数。它本来就是处理字符串的，所以必须强大。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">length(str) #获取字符串长度</span><br><span class=\"line\">split(input-string,output-array,separator)</span><br><span class=\"line\">substr(input-string, location, length)</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"语言特性\"><a href=\"#语言特性\" class=\"headerlink\" title=\"语言特性\"></a>语言特性</h3><p>awk是个小型的编程语言，看它的基本语法，如果你需要复杂一点的逻辑，请自行深入了解，包括一些时间处理函数：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># logic</span><br><span class=\"line\">if(x=a)&#123;&#125;</span><br><span class=\"line\">if(x=a)&#123;&#125;else&#123;&#125;</span><br><span class=\"line\">while(x=a)&#123;break;continue;&#125;</span><br><span class=\"line\">do&#123;&#125;while(x=a)</span><br><span class=\"line\">for(;;)&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># array</span><br><span class=\"line\">arr[key] = value</span><br><span class=\"line\">for(key in arr)&#123;arr[key]&#125;</span><br><span class=\"line\">delete arr[key]</span><br><span class=\"line\"></span><br><span class=\"line\">asort(arr) #简单排序</span><br></pre></td></tr></table></figure></div>\n\n<p>据说，awk可以胜任所有的文本操作。因为它本身就是一门语言啊。</p>\n<h1 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h1><p>曾经使用awk编写过复杂的日志处理和统计程序。虽然比写<code>sed</code>舒畅了很多，但还是备受煎熬。更加上现在有各种nawk,gawk版本之间的区别，所以业务复杂度一增长，就习惯性的转向更加简洁、工具更全的python。</p>\n<p>awk处理一些简单的文本还是极其方便的，最常用的还是打印某一列之类的，包括一些格式化输出。对于awk，要简单的滚瓜烂熟，复杂的耳熟能详，毕竟有些<code>大牛</code>，就喜欢写这种脚本呢。</p>\n<p>更多精彩文章。</p>\n<p><a href=\"https://juejin.im/post/5c49317d5188252d3b3e377b\" target=\"_blank\" rel=\"noopener\">《微服务不是全部，只是特定领域的子集》</a></p>\n<p><a href=\"https://juejin.im/post/5bf778ef5188251b8a26ed8b\" target=\"_blank\" rel=\"noopener\">《“分库分表” ？选型和流程要慎重，否则会失控》</a></p>\n<p><a href=\"https://juejin.im/post/5bee22c051882528c4466334\" target=\"_blank\" rel=\"noopener\">这么多监控组件，总有一款适合你</a></p>\n<p><a href=\"https://juejin.im/post/5c186088f265da61691728fd\" target=\"_blank\" rel=\"noopener\">《Kafka消息系统基础知识索引》</a></p>\n<p><a href=\"https://juejin.im/post/5c75cbabe51d453ecf7d6f3f\" target=\"_blank\" rel=\"noopener\">《使用Netty，我们到底在开发些什么？》</a></p>\n<p>Linux五件套之类的。</p>\n<p><a href=\"https://juejin.im/post/5bed239251882502df7f1e8e\" target=\"_blank\" rel=\"noopener\">《Linux之《荒岛余生》（一）准备篇》</a></p>\n<p><a href=\"https://juejin.im/post/5bf0b52df265da611b57f0e6\" target=\"_blank\" rel=\"noopener\">《Linux之《荒岛余生》（二）CPU篇》</a></p>\n<p><a href=\"https://juejin.im/post/5c00aee06fb9a049be5d3641\" target=\"_blank\" rel=\"noopener\">《Linux之《荒岛余生》（三）内存篇》</a></p>\n<p><a href=\"https://juejin.im/post/5c1dff6851882546150afb8f\" target=\"_blank\" rel=\"noopener\">《Linux之《荒岛余生》（四）I/O篇》</a></p>\n<p><a href=\"https://juejin.im/post/5c272ec66fb9a049e93ccffe\" target=\"_blank\" rel=\"noopener\">《Linux之《荒岛余生》（五）网络篇》</a></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/6/17/16b64cb6e60d3b3a?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n","categories":[],"tags":[{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"},{"name":"Shell","slug":"Shell","count":1,"path":"api/tags/Shell.json"}]}