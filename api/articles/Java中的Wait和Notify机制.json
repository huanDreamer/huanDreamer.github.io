{"title":"Java 中的 Wait 和 Notify 机制","slug":"Java中的Wait和Notify机制","date":"2019-05-11T15:10:27.027Z","updated":"2019-05-30T00:52:25.406Z","comments":true,"path":"api/articles/Java中的Wait和Notify机制.json","photos":[],"link":"","excerpt":"","covers":["https://user-gold-cdn.xitu.io/2019/5/11/16aa5da0e43cb932?imageView2/0/w/1280/h/960/ignore-error/1","https://user-gold-cdn.xitu.io/2019/5/11/16aa5da0e439ccdb?imageView2/0/w/1280/h/960/ignore-error/1","https://user-gold-cdn.xitu.io/2019/5/2/16a78675262bc604?imageView2/0/w/1280/h/960/ignore-error/1"],"content":"<blockquote>\n<p>本文转载自 <a href=\"https://juejin.im/post/5cd67d31e51d453b5854b8a8\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5cd67d31e51d453b5854b8a8</a> </p>\n</blockquote>\n<h3 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h3><p><code>Wait</code> 和 <code>Notify</code> 是 <code>Java</code> 面试中常见的问题，但是在平时工作中可能不常见到。大家或多或少知道些背景知识，例如二者均为 <code>Object</code> 类的方法，而不是 <code>Thread</code> 特有的（因为<code>锁</code>是每个对象都具有的特性，因此操作锁的方法也紧跟对象，没毛病），且都只能在<code>同步代码块</code>中调用（即前提是先获得对象的<code>监视器锁</code>，一般来说在 <code>synchronized</code> 代码块中使用），否则抛出异常 <code>IllegalMonitorStateException</code>。</p>\n<p><code>Wait</code> 会挂起自己让出 <code>CPU</code> 时间片，并将自身加入锁定对象的 <code>Wait Set</code> 中，释放对象的监视器锁<code>（monitor）</code>让其他线程可以获得，直到其他线程调用此对象的 <code>notify( )</code> 方法或 <code>notifyAll( )</code> 方法，自身才能被唤醒（这里有个特殊情况就是 <code>Wait</code> 可以增加等待时间）；<code>Notify</code> 方法则会释放监视器锁的同时，唤醒对象 <code>Wait Set</code> 中等待的线程，顺序是随机的不确定。</p>\n<h3 id=\"Wait-Set\"><a href=\"#Wait-Set\" class=\"headerlink\" title=\"Wait Set\"></a>Wait Set</h3><p><code>虚拟机规范</code>中定义了一个 <code>Wait Set</code> 的概念，但至于其具体是什么样的数据结构规范没有强制规定，<strong>意味着不同的厂商可以自行实现</strong>，但不管怎样，线程调用了某个对象的 <code>Wait</code> 方法，就会被加入该对象的 <code>Wait Set</code> 中</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/5/11/16aa5da0e43cb932?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"Demo-代码\"><a href=\"#Demo-代码\" class=\"headerlink\" title=\"Demo 代码\"></a>Demo 代码</h3><p>下面通过一段 <code>demo</code> 来解释 <code>Wait</code> 和 <code>Notify</code> 的功能</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\">public class WaitNotify &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        final Object A = new Object();</span><br><span class=\"line\">        final Object B = new Object();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t1 = new Thread(&quot;t1-thread&quot;) &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                synchronized (A) &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot;拿到 A 的监视器锁&quot;);</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot;尝试获取 B 的监视器锁&quot;);</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName() + &quot;休眠 2s，不释放 A 的监视器锁&quot;);</span><br><span class=\"line\">                        TimeUnit.SECONDS.sleep(2);</span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName() + &quot;挂起自己，释放 A 的监视器锁&quot;);</span><br><span class=\"line\">                        A.wait();</span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName() + &quot;被唤醒，等待获取 B 的监视器锁&quot;);</span><br><span class=\"line\">                    &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    synchronized (B) &#123;</span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName() + &quot;拿到 B 的监视器锁&quot;);</span><br><span class=\"line\">                        B.notify();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t2 = new Thread(&quot;t2-thread&quot;) &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                synchronized (B) &#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot;拿到 B 的监视器锁&quot;);</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName() + &quot;尝试获取 A 的监视器锁&quot;);</span><br><span class=\"line\">                    synchronized (A) &#123;</span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName() + &quot;拿到 A 的监视器锁&quot;);</span><br><span class=\"line\">                        try &#123;</span><br><span class=\"line\">                            System.out.println(Thread.currentThread().getName() + &quot;休眠 2s，不释放 A 的监视器锁&quot;);</span><br><span class=\"line\">                            TimeUnit.SECONDS.sleep(2);</span><br><span class=\"line\">                        &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                            e.printStackTrace();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName() + &quot;挂起自己，释放 A 的监视器锁，唤醒 t0&quot;);</span><br><span class=\"line\">                        A.notify();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName() + &quot;休眠 2s，不释放 B 的监视器锁&quot;);</span><br><span class=\"line\">                        TimeUnit.SECONDS.sleep(2);</span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName() + &quot;挂起自己，释放 B 的监视器锁&quot;);</span><br><span class=\"line\">                        B.wait();</span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName() + &quot;被唤醒&quot;);</span><br><span class=\"line\">                    &#125; catch (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"输出结果\"><a href=\"#输出结果\" class=\"headerlink\" title=\"输出结果\"></a>输出结果</h3><div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1-thread拿到 A 的监视器锁</span><br><span class=\"line\">t2-thread拿到 B 的监视器锁</span><br><span class=\"line\">t1-thread尝试获取 B 的监视器锁</span><br><span class=\"line\">t2-thread尝试获取 A 的监视器锁</span><br><span class=\"line\">t1-thread休眠 2s，不释放 A 的监视器锁</span><br><span class=\"line\">t1-thread挂起自己，释放 A 的监视器锁</span><br><span class=\"line\">t2-thread拿到 A 的监视器锁</span><br><span class=\"line\">t2-thread休眠 2s，不释放 A 的监视器锁</span><br><span class=\"line\">t2-thread挂起自己，释放 A 的监视器锁，唤醒 t0</span><br><span class=\"line\">t2-thread休眠 2s，不释放 B 的监视器锁</span><br><span class=\"line\">t1-thread被唤醒，等待获取 B 的监视器锁</span><br><span class=\"line\">t2-thread挂起自己，释放 B 的监视器锁</span><br><span class=\"line\">t1-thread拿到 B 的监视器锁</span><br><span class=\"line\">t2-thread被唤醒</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p><img src=\"https://user-gold-cdn.xitu.io/2019/5/11/16aa5da0e439ccdb?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>这是一个不定时更新的、披着程序员外衣的文青小号，欢迎关注。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/5/2/16a78675262bc604?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n","categories":[],"tags":[{"name":"Java","slug":"Java","count":26,"path":"api/tags/Java.json"}]}