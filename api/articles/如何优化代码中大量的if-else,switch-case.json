{"title":"如何优化代码中大量的if/else,switch/case?","slug":"如何优化代码中大量的if-else,switch-case","date":"2019-04-30T16:00:00.000Z","updated":"2019-05-30T00:52:25.421Z","comments":true,"path":"api/articles/如何优化代码中大量的if-else,switch-case.json","photos":[],"link":"","excerpt":"随着项目的迭代，代码中存在的分支判断可能会越来越多，当里面涉及到的逻辑比较复杂或者分支数量实在是多的难以维护的时候，我们就要考虑下，有办法能让这些代码变得更优雅吗？","covers":["https://user-gold-cdn.xitu.io/2019/4/17/16a28c18805b08e1?imageView2/0/w/1280/h/960/ignore-error/1"],"content":"<p>随着项目的迭代，代码中存在的分支判断可能会越来越多，当里面涉及到的逻辑比较复杂或者分支数量实在是多的难以维护的时候，我们就要考虑下，有办法能让这些代码变得更优雅吗？</p>\n<a id=\"more\"></a> \n\n\n<blockquote>\n<p>本文来自于 <a href=\"https://juejin.im/post/5cc6a7fc5188250f015b5843\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5cc6a7fc5188250f015b5843</a> </p>\n</blockquote>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><h3 id=\"使用枚举\"><a href=\"#使用枚举\" class=\"headerlink\" title=\"使用枚举\"></a>使用枚举</h3><p>这里我们简单的定义一个表示状态的枚举。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public enum Status &#123;</span><br><span class=\"line\">    NEW(0),RUNNABLE(1),RUNNING(2),BLOCKED(3),DEAD(4);</span><br><span class=\"line\"></span><br><span class=\"line\">    public int statusCode;</span><br><span class=\"line\"></span><br><span class=\"line\">    Status(int statusCode)&#123;</span><br><span class=\"line\">        this.statusCode = statusCode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>那么我们在使用的时候就可以直接通过枚举调用了。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int statusCode = Status.valueOf(&quot;NEW&quot;).statusCode;</span><br></pre></td></tr></table></figure></div>\n\n<p>优雅的解决了下面代码赋值的方式</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(param.equals(&quot;NEW&quot;))&#123;</span><br><span class=\"line\">    statusCode = 0;</span><br><span class=\"line\">&#125;else if(param.equals(&quot;RUNNABLE&quot;))&#123;</span><br><span class=\"line\">    statusCode = 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"善用-Optional\"><a href=\"#善用-Optional\" class=\"headerlink\" title=\"善用 Optional\"></a>善用 Optional</h3><p>在项目中，总少不了一些非空的判断,可能大部分人还是如下的用法</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(null == user)&#123;</span><br><span class=\"line\">    //action1</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    //action2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>这时候该掏出Optional这个秘密武器了，它可以让非空校验更加优雅，间接的减少if操作。没了解过Optional的同学可自行Google，这里就不再赘述。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional&lt;User&gt; userOptional = Optional.ofNullable(user);</span><br><span class=\"line\">userOptional.map(action1).orElse(action2);</span><br></pre></td></tr></table></figure></div>\n\n<p>上面的代码跟第一段是等效的，通过一些新特性让代码更加紧凑。</p>\n<h3 id=\"表驱动法\"><a href=\"#表驱动法\" class=\"headerlink\" title=\"表驱动法\"></a>表驱动法</h3><p>来自Google的解释：表驱动法是一种编程模式，它的本质是，从表里查询信息来代替逻辑语句(if,case)。下面看一个案例，通过月份来获取当月的天数（仅作为案例演示，获取2月份的数据不严谨），普通做法：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int getMonthDays(int month)&#123;</span><br><span class=\"line\">\tswitch(month)&#123;</span><br><span class=\"line\">\t\tcase 1:return 31;break;</span><br><span class=\"line\">\t\tcase 2:return 29;break;</span><br><span class=\"line\">\t\tcase 3:return 31;break;</span><br><span class=\"line\">\t\tcase 4:return 30;break;</span><br><span class=\"line\">\t\tcase 5:return 31;break;</span><br><span class=\"line\">\t\tcase 6:return 30;break;</span><br><span class=\"line\">\t\tcase 7:return 31;break;</span><br><span class=\"line\">\t\tcase 8:return 31;break;</span><br><span class=\"line\">\t\tcase 9:return 30;break;</span><br><span class=\"line\">\t\tcase 10:return 31;break;</span><br><span class=\"line\">\t\tcase 11:return 30;break;</span><br><span class=\"line\">\t\tcase 12:return 31;break;</span><br><span class=\"line\">\t\tdefault：return 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>表驱动法实现方式</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int monthDays[12] = &#123;31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;;</span><br><span class=\"line\">int getMonthDays(int month)&#123;</span><br><span class=\"line\">\treturn monthDays[--month];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>其实这里的表就是数组而已，通过直接查询数组来获得需要的数据，那么同理，Map之类的容器也可以成为我们编程概念中的表。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;?, Function&lt;?&gt; action&gt; actionsMap = new HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">// 初试配置对应动作</span><br><span class=\"line\">actionsMap.put(value1, (someParams) -&gt; &#123; doAction1(someParams)&#125;);</span><br><span class=\"line\">actionsMap.put(value2, (someParams) -&gt; &#123; doAction2(someParams)&#125;);</span><br><span class=\"line\">actionsMap.put(value3, (someParams) -&gt; &#123; doAction3(someParams)&#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">// 省略 null 判断</span><br><span class=\"line\">actionsMap.get(param).apply(someParams);</span><br></pre></td></tr></table></figure></div>\n\n<p>通过Java8的lambda表达式，我们把需要执行东西存进value中，调用的时候通过匹配key的方式进行。</p>\n<h3 id=\"提前判断返回\"><a href=\"#提前判断返回\" class=\"headerlink\" title=\"提前判断返回\"></a>提前判断返回</h3><p>在之前的文章《优化代码中的“坏味道”》里也有提过，如下语句</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(condition)&#123;</span><br><span class=\"line\">   //dost</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">   return ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>改为</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(!condition)&#123;</span><br><span class=\"line\">   return ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//dost</span><br></pre></td></tr></table></figure></div>\n\n<p>避免一些不必要的分支，让代码更精炼。</p>\n<h3 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h3><p>除了上面提到的方法，我们还可以通过一些设计模式，例如策略模式，责任链模式等来优化存在大量if,case的情况，其原理会和表驱动的模式比较相似，大家可以自己动手实现一下，例如我们在Netty的使用过程中，可能会出现需要大量判断不同的命令去执行对应动作的场景。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerHandler.java</span><br><span class=\"line\"></span><br><span class=\"line\">if(command.equals(&quot;login&quot;))&#123;</span><br><span class=\"line\">    //执行登录</span><br><span class=\"line\">&#125;else if(command.equals(&quot;chat&quot;))&#123;</span><br><span class=\"line\">    //聊天</span><br><span class=\"line\">&#125;else if(command.equals(&quot;broadcast&quot;))&#123;</span><br><span class=\"line\">    //广播信息</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure></div>\n\n<p>该如何处理呢？这里先卖个关子，大家可以先思考一下，笔记后续会写一些关于Netty实现IM的文章，到时候会详细介绍。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>最后要明确一点，不是所有的if/else,switch/case都需要优化，当我们发现有“痛点”或者“闻到代码有坏味道”再来优化才是最好的，不然你可能会写了一个从不扩展的可扩展代码，所有的优化都是为了更好的迭代项目，更好的服务于业务，而不是为了优化而优化。</p>\n<hr>\n<p>公众号博文同步Github仓库，有兴趣的朋友可以帮忙给个Star哦，码字不易，感谢支持。</p>\n<p><a href=\"https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FPeppaLittlePig%2Fblog-wechat\" target=\"_blank\" rel=\"noopener\">github.com/PeppaLittle…</a></p>\n<h3 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h3><p>《<a href=\"https://juejin.im/post/5cc16dd25188252d3f7e1712\" target=\"_blank\" rel=\"noopener\">如何提高使用Java反射的效率？</a>》\n《<a href=\"https://juejin.im/post/5cbc1309f265da038a147452\" target=\"_blank\" rel=\"noopener\">Java日志正确使用姿势</a>》\n《<a href=\"https://juejin.im/post/5cb58010e51d456e4d4de729\" target=\"_blank\" rel=\"noopener\">大白话搞懂什么是同步/异步/阻塞/非阻塞</a>》\n《<a href=\"https://juejin.im/post/5ca83c5a6fb9a05e5343b6da\" target=\"_blank\" rel=\"noopener\">论JVM爆炸的几种姿势及自救方法</a>》\n有收获的话，就点个赞吧</p>\n<p><strong>关注「深夜里的程序猿」，分享最干的干货</strong></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/4/17/16a28c18805b08e1?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n","categories":[],"tags":[{"name":"Java","slug":"Java","count":26,"path":"api/tags/Java.json"}]}