{"title":"Spring Boot + Vue 前后端分离，两种文件上传方式总结","slug":"SpringBoot+Vue前后端分离，两种文件上传方式总结","date":"2019-05-02T16:00:00.000Z","updated":"2019-05-30T00:52:25.413Z","comments":true,"path":"api/articles/SpringBoot+Vue前后端分离，两种文件上传方式总结.json","photos":[],"link":"","excerpt":"","covers":["https://user-gold-cdn.xitu.io/2019/4/28/16a61e63ba1cae51?imageView2/0/w/1280/h/960/ignore-error/1","https://user-gold-cdn.xitu.io/2019/4/28/16a61e641c0ec4fc?imageView2/0/w/1280/h/960/ignore-error/1"],"content":"<blockquote>\n<p>本文来自于 <a href=\"https://juejin.im/post/5cc518186fb9a03234165172\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5cc518186fb9a03234165172</a> </p>\n</blockquote>\n<p>在Vue.js 中，如果网络请求使用 axios ，并且使用了 ElementUI 库，那么一般来说，文件上传有两种不同的实现方案：</p>\n<ol>\n<li>通过 Ajax 实现文件上传</li>\n<li>通过 ElementUI 里边的 Upload 组件实现文件上传</li>\n</ol>\n<p>两种方案，各有优缺点，我们分别来看。</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><p>首先我们需要一点点准备工作，就是在后端提供一个文件上传接口，这是一个普通的 Spring Boot 项目，如下：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleDateFormat sdf = new SimpleDateFormat(&quot;/yyyy/MM/dd/&quot;);</span><br><span class=\"line\">@PostMapping(&quot;/import&quot;)</span><br><span class=\"line\">public RespBean importData(MultipartFile file, HttpServletRequest req) throws IOException &#123;</span><br><span class=\"line\">    String format = sdf.format(new Date());</span><br><span class=\"line\">    String realPath = req.getServletContext().getRealPath(&quot;/upload&quot;) + format;</span><br><span class=\"line\">    File folder = new File(realPath);</span><br><span class=\"line\">    if (!folder.exists()) &#123;</span><br><span class=\"line\">        folder.mkdirs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String oldName = file.getOriginalFilename();</span><br><span class=\"line\">    String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(&quot;.&quot;));</span><br><span class=\"line\">    file.transferTo(new File(folder,newName));</span><br><span class=\"line\">    String url = req.getScheme() + &quot;://&quot; + req.getServerName() + &quot;:&quot; + req.getServerPort() + &quot;/upload&quot; + format + newName;</span><br><span class=\"line\">    System.out.println(url);</span><br><span class=\"line\">    return RespBean.ok(&quot;上传成功!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>这里的文件上传比较简单，上传的文件按照日期进行归类，使用 UUID 给文件重命名。</p>\n<p><strong>这里为了简化代码，我省略掉了异常捕获，上传结果直接返回成功，后端代码大伙可根据自己的实际情况自行修改。</strong></p>\n<h1 id=\"Ajax-上传\"><a href=\"#Ajax-上传\" class=\"headerlink\" title=\"Ajax 上传\"></a>Ajax 上传</h1><p>在 Vue 中，通过 Ajax 实现文件上传，方案和传统 Ajax 实现文件上传基本上是一致的，唯一不同的是查找元素的方式。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;file&quot; ref=&quot;myfile&quot;&gt;</span><br><span class=\"line\">&lt;el-button @click=&quot;importData&quot; type=&quot;success&quot; size=&quot;mini&quot; icon=&quot;el-icon-upload2&quot;&gt;导入数据&lt;/el-button&gt;</span><br></pre></td></tr></table></figure></div>\n\n<p>在这里，首先提供一个文件导入 input 组件，再来一个导入按钮，在导入按钮的事件中来完成导入的逻辑。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">importData() &#123;</span><br><span class=\"line\">  let myfile = this.$refs.myfile;</span><br><span class=\"line\">  let files = myfile.files;</span><br><span class=\"line\">  let file = files[0];</span><br><span class=\"line\">  var formData = new FormData();</span><br><span class=\"line\">  formData.append(&quot;file&quot;, file);</span><br><span class=\"line\">  this.uploadFileRequest(&quot;/system/basic/jl/import&quot;,formData).then(resp=&gt;&#123;</span><br><span class=\"line\">    if (resp) &#123;</span><br><span class=\"line\">      console.log(resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>关于这段上传核心逻辑，解释如下：</p>\n<ol>\n<li>首先利用 Vue 中的 $refs 查找到存放文件的元素。</li>\n<li>type 为 file 的 input 元素内部有一个 files 数组，里边存放了所有选择的 file，由于文件上传时，文件可以多选，因此这里拿到的 files 对象是一个数组。</li>\n<li>从 files 对象中，获取自己要上传的文件，由于这里是单选，所以其实就是数组中的第一项。</li>\n<li>构造一个 FormData ，用来存放上传的数据,FormData 不可以像 Java 中的 StringBuffer 使用链式配置。</li>\n<li>构造好 FromData 后，就可以直接上传数据了，FormData 就是要上传的数据。</li>\n<li>文件上传注意两点，1. 请求方法为 post，2. 设置 <code>Content-Type</code> 为 <code>multipart/form-data</code> 。</li>\n</ol>\n<p>这种文件上传方式，实际上就是传统的 Ajax 上传文件，和大家常见的 jQuery 中写法不同的是，这里元素查找的方式不一样（实际上元素查找也可以按照JavaScript 中原本的写法来实现），其他写法一模一样。这种方式是一个通用的方式，和使用哪一种前端框架无关。最后再和大家来看下封装的上传方法：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const uploadFileRequest = (url, params) =&gt; &#123;</span><br><span class=\"line\">  return axios(&#123;</span><br><span class=\"line\">    method: &apos;post&apos;,</span><br><span class=\"line\">    url: `$&#123;base&#125;$&#123;url&#125;`,</span><br><span class=\"line\">    data: params,</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      &apos;Content-Type&apos;: &apos;multipart/form-data&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>经过这几步的配置后，前端就算上传完成了，可以进行文件上传了。</p>\n<h1 id=\"使用-Upload-组件\"><a href=\"#使用-Upload-组件\" class=\"headerlink\" title=\"使用 Upload 组件\"></a>使用 Upload 组件</h1><p>如果使用 Upload ，则需要引入 ElementUI，所以一般建议，如果使用了 ElementUI 做 UI 控件的话，则可以考虑使用 Upload 组件来实现文件上传，如果没有使用 ElementUI 的话，则不建议使用 Upload 组件，至于其他的 UI 控件，各自都有自己的文件上传组件，具体使用可以参考各自文档。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-upload</span><br><span class=\"line\">  style=&quot;display: inline&quot;</span><br><span class=\"line\">  :show-file-list=&quot;false&quot;</span><br><span class=\"line\">  :on-success=&quot;onSuccess&quot;</span><br><span class=\"line\">  :on-error=&quot;onError&quot;</span><br><span class=\"line\">  :before-upload=&quot;beforeUpload&quot;</span><br><span class=\"line\">  action=&quot;/system/basic/jl/import&quot;&gt;</span><br><span class=\"line\">  &lt;el-button size=&quot;mini&quot; type=&quot;success&quot; :disabled=&quot;!enabledUploadBtn&quot; :icon=&quot;uploadBtnIcon&quot;&gt;&#123;&#123;btnText&#125;&#125;&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/el-upload&gt;</span><br></pre></td></tr></table></figure></div>\n\n<ol>\n<li>show-file-list 表示是否展示上传文件列表，默认为true，这里设置为不展示。</li>\n<li>before-upload 表示上传之前的回调，可以在该方法中，做一些准备工作，例如展示一个进度条给用户 。</li>\n<li>on-success 和 on-error 分别表示上传成功和失败时候的回调，可以在这两个方法中，给用户一个相应的提示，如果有进度条，还需要在这两个方法中关闭进度条。</li>\n<li>action 指文件上传地址。</li>\n<li>上传按钮的点击状态和图标都设置为变量 ，在文件上传过程中，修改上传按钮的点击状态为不可点击，同时修改图标为一个正在加载的图标 loading。</li>\n<li>上传的文本也设为变量，默认上传 button 的文本是 <code>数据导入</code> ，当开始上传后，将找个 button 上的文本修改为 <code>正在导入</code>。</li>\n</ol>\n<p>相应的回调如下：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onSuccess(response, file, fileList) &#123;</span><br><span class=\"line\">  this.enabledUploadBtn = true;</span><br><span class=\"line\">  this.uploadBtnIcon = &apos;el-icon-upload2&apos;;</span><br><span class=\"line\">  this.btnText = &apos;数据导入&apos;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">onError(err, file, fileList) &#123;</span><br><span class=\"line\">  this.enabledUploadBtn = true;</span><br><span class=\"line\">  this.uploadBtnIcon = &apos;el-icon-upload2&apos;;</span><br><span class=\"line\">  this.btnText = &apos;数据导入&apos;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">beforeUpload(file) &#123;</span><br><span class=\"line\">  this.enabledUploadBtn = false;</span><br><span class=\"line\">  this.uploadBtnIcon = &apos;el-icon-loading&apos;;</span><br><span class=\"line\">  this.btnText = &apos;正在导入&apos;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<ol>\n<li>在文件开始上传时，修改上传按钮为不可点击，同时修改上传按钮的图标和文本。</li>\n<li>文件上传成功或者失败时，修改上传按钮的状态为可以点击，同时恢复上传按钮的图标和文本。</li>\n</ol>\n<p>上传效果图如下：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/4/28/16a61e63ba1cae51?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>两种上传方式各有优缺点：</p>\n<ol>\n<li>第一种方式最大的优势是通用，一招鲜吃遍天，到哪里都能用，但是对于上传过程的监控，进度条的展示等等逻辑都需要自己来实现。</li>\n<li>第二种方式不够通用，因为它是 ElementUI 中的组件，得引入 ElementUI 才能使用，不过这种方式很明显有需多比较方便的回调，可以实现非常方便的处理常见的各种上传问题。</li>\n<li>常规的上传需求第二种方式可以满足，但是如果要对上传的方法进行定制，则还是建议使用第一种上传方案。</li>\n</ol>\n<p>关注公众号牧码小子，专注于 Spring Boot+微服务，定期视频教程分享，关注后回复 Java ，领取松哥为你精心准备的 Java 干货！</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/4/28/16a61e641c0ec4fc?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n","categories":[],"tags":[{"name":"Vue.js","slug":"Vue-js","count":1,"path":"api/tags/Vue-js.json"}]}