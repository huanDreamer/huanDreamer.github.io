{"title":"【Spring】Autowired原理及与Resource注解区别","slug":"【Spring】Autowired原理及与Resource注解区别","date":"2019-05-17T07:03:08.008Z","updated":"2019-05-30T00:52:25.416Z","comments":true,"path":"api/articles/【Spring】Autowired原理及与Resource注解区别.json","photos":[],"link":"","excerpt":"","covers":["https://user-gold-cdn.xitu.io/2018/9/9/165bc4a503dfcc18?imageView2/0/w/1280/h/960/ignore-error/1"],"content":"<blockquote>\n<p>本文转载自 <a href=\"https://juejin.im/post/5cde05fae51d454759351d8c\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5cde05fae51d454759351d8c</a> </p>\n</blockquote>\n<h2 id=\"Autowired注解\"><a href=\"#Autowired注解\" class=\"headerlink\" title=\"Autowired注解\"></a>Autowired注解</h2><p>Autowired顾名思义，表示自动注入，如下是Autowired注解的源代码：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class=\"line\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">public @interface Autowired &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Declares whether the annotated dependency is required.</span><br><span class=\"line\">     * &lt;p&gt;Defaults to &#123;@code true&#125;.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean required() default true;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>从Autowired的实现可以看到，Autowired可以用于类的构造方法，类的字段，类的方法以及注解类型上，但是Autowired不能用于类上面。</p>\n<p>关于Autowired注解，有如下问题需要解决：</p>\n<ol>\n<li><p>Autowired作用在不同的范围上(构造方法，字段、方法)上，它的装配策略如何，按名称还是类型？</p>\n</li>\n<li><p>为构造方法，字段和方法添加Autowired注解之后，谁来解析这个Autowired注解，完成装配</p>\n</li>\n<li><p>装配的bean从何处而来，是在Spring的xml文件中定义的bean吗？</p>\n</li>\n</ol>\n<h2 id=\"从Autowired的javadoc开始\"><a href=\"#从Autowired的javadoc开始\" class=\"headerlink\" title=\"从Autowired的javadoc开始\"></a>从Autowired的javadoc开始</h2><p>从Autowired的javadoc中得到如下信息</p>\n<ol>\n<li><p>AutowiredAnnotationBeanPostProcessor负责扫描Autowired注解，然后完成自动注入</p>\n</li>\n<li><p>可以对私有的字段使用Autowired进行自动装配，而无需为私有字段定义getter/setter来read/write这个字段</p>\n</li>\n<li><p>使用Autowired注解的类方法，可以是任意的方法名，任意的参数，Spring会从容器中找到合适的bean进行装配，setter自动注入跟对字段自动注入效果一样</p>\n</li>\n</ol>\n<h2 id=\"Autowired注解的解析\"><a href=\"#Autowired注解的解析\" class=\"headerlink\" title=\"Autowired注解的解析\"></a>Autowired注解的解析</h2><p>当项目中使用了Autowired注解时，需要明确的告诉Spring,配置中引用了自动注入的功能，在Spring的配置文件，做法有两种</p>\n<ol>\n<li><p>配置AutowiredAnnotationBeanPostProcessor</p>\n</li>\n<li><p>使用<a href>context:annotation-config/</a>。<a href>context:annotationconfig/</a> 将隐式地向 Spring 容器注册<code>AutowiredAnnotationBeanPostProcessor</code>、<code>CommonAnnotationBeanPostProcessor</code>、<code>PersistenceAnnotationBeanPostProcessor</code>以及<code>RequiredAnnotationBeanPostProcessor</code> 这 4 个 BeanPostProcessor。</p>\n</li>\n</ol>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><h3 id=\"1-实例一：\"><a href=\"#1-实例一：\" class=\"headerlink\" title=\"1. 实例一：\"></a>1. 实例一：</h3><pre><code>* UserSerice依赖的UserDao使用Autowired注解，\n* UserDao没有在Spring配置文件中定义</code></pre><p><strong>结果：UserDao为null</strong></p>\n<h3 id=\"2-实例二：\"><a href=\"#2-实例二：\" class=\"headerlink\" title=\"2. 实例二：\"></a>2. 实例二：</h3><pre><code>* UserSerice依赖的UserDao使用Autowired注解\n* UserDao在Spring配置文件中有定义</code></pre><p><strong>结果：UserDao为null</strong></p>\n<h3 id=\"3-实例三：\"><a href=\"#3-实例三：\" class=\"headerlink\" title=\"3. 实例三：\"></a>3. 实例三：</h3><pre><code>* UserSerice依赖的UserDao使用Autowired注解\n* UserDao在Spring配置文件中有定义\n* Spring中使用[context:annotation-config/]()</code></pre><p>/<em>/</em> 结果：UserDao正确注入，在Spring中配置的UserDao的实现，而在UserService中的是UserDao的接口，也就是说，虽然它们类型没有完全匹配，但是由于是实现/<em>/</em></p>\n<p><strong>关系，Spring仍然能够完成自动注入</strong></p>\n<h3 id=\"4-实例四：\"><a href=\"#4-实例四：\" class=\"headerlink\" title=\"4. 实例四：\"></a>4. 实例四：</h3><pre><code>* UserSerice依赖的UserDao使用Autowired注解\n* UserDao在Spring配置文件中有定义\n* Spring中配置AutowiredAnnotationBeanPostProcessor</code></pre><p><strong>结果：UserDao正确注入，同实例三</strong></p>\n<h3 id=\"5-实例五：\"><a href=\"#5-实例五：\" class=\"headerlink\" title=\"5. 实例五：\"></a>5. 实例五：</h3><pre><code>* UserSerice依赖的UserDao使用Autowired注解\n* UserDao在Spring配置文件中有两份定义(id不同)\n* Spring中使用[context:annotation-config/]()</code></pre><p><strong>结果：</strong></p>\n<p><strong>1. 如果UserDao的属性名与某个bean的id相同，那么按照属性名和id名称匹配原则，自动装配</strong></p>\n<p><strong>2. 如果UserService中定义的UserDao的属性名，与Spring配置文件中的两个id都不同，那么注入失败，异常抛出，提示，无法完整自动装配</strong></p>\n<h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a><strong>结论：</strong></h2><ol>\n<li><p>使用Autowired自动装配，必须在Spring的配置文件中使用<a href>context:annotation-config/</a>来告诉Spring需要进行自动装配扫描（AutowiredAnnotationBeanPostProcessor不推荐使用）</p>\n</li>\n<li><p>Autowired默认按类型进行匹配，当匹配到多个满足条件的bean时，再按照属性名和bean的id进行匹配，如果仍然有多个匹配上或者没有一个匹配上，则抛出异常，提示自动装配失败</p>\n</li>\n<li><p>在使用Autowired时，可以使用Qualifier注解，显式的指定，当冲突发生时，使用那个id对应的bean</p>\n</li>\n<li><p>Autowired注解自动装配功能完成的是依赖的自动注入，因此，在一个bean中，它依赖的bean可以通过自动注入的方式完成而不需要显式的为它的属性进行注入。但是这些依赖的bean仍然不能省略，还是要在Spring中进行配置，省略的仅仅是bean属性的注入配置代码</p>\n</li>\n</ol>\n<h2 id=\"Resource注解\"><a href=\"#Resource注解\" class=\"headerlink\" title=\"Resource注解\"></a>Resource注解</h2><p>Resource注解在功能和目的上，等效于Autowried+Qualifier注解，Resource注解是JSR-250规范的一部分，它定义在JDK的javax.annoation包中，如下是它的定义：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package javax.annotation;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.annotation.*;</span><br><span class=\"line\">import static java.lang.annotation.ElementType.*;</span><br><span class=\"line\">import static java.lang.annotation.RetentionPolicy.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * The Resource annotation marks a resource that is needed</span><br><span class=\"line\"> * by the application.  This annotation may be applied to an</span><br><span class=\"line\"> * application component class, or to fields or methods of the</span><br><span class=\"line\"> * component class.  When the annotation is applied to a</span><br><span class=\"line\"> * field or method, the container will inject an instance</span><br><span class=\"line\"> * of the requested resource into the application component</span><br><span class=\"line\"> * when the component is initialized.  If the annotation is</span><br><span class=\"line\"> * applied to the component class, the annotation declares a</span><br><span class=\"line\"> * resource that the application will look up at runtime. &lt;p&gt;</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * Even though this annotation is not marked Inherited, deployment</span><br><span class=\"line\"> * tools are required to examine all superclasses of any component</span><br><span class=\"line\"> * class to discover all uses of this annotation in all superclasses.</span><br><span class=\"line\"> * All such annotation instances specify resources that are needed</span><br><span class=\"line\"> * by the application component.  Note that this annotation may</span><br><span class=\"line\"> * appear on private fields and methods of superclasses; the container</span><br><span class=\"line\"> * is required to perform injection in these cases as well.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @since Common Annotations 1.0</span><br><span class=\"line\"> */</span><br><span class=\"line\">@Target(&#123;TYPE, FIELD, METHOD&#125;)</span><br><span class=\"line\">@Retention(RUNTIME)</span><br><span class=\"line\">public @interface Resource &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The JNDI name of the resource.  For field annotations,</span><br><span class=\"line\">     * the default is the field name.  For method annotations,</span><br><span class=\"line\">     * the default is the JavaBeans property name corresponding</span><br><span class=\"line\">     * to the method.  For class annotations, there is no default</span><br><span class=\"line\">     * and this must be specified.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String name() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The name of the resource that the reference points to. It can</span><br><span class=\"line\">     * link to any compatible resource using the global JNDI names.</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @since Common Annotations 1.1</span><br><span class=\"line\">     */</span><br><span class=\"line\"></span><br><span class=\"line\">    String lookup() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The Java type of the resource.  For field annotations,</span><br><span class=\"line\">     * the default is the type of the field.  For method annotations,</span><br><span class=\"line\">     * the default is the type of the JavaBeans property.</span><br><span class=\"line\">     * For class annotations, there is no default and this must be</span><br><span class=\"line\">     * specified.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    Class&lt;?&gt; type() default java.lang.Object.class;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The two possible authentication types for a resource.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    enum AuthenticationType &#123;</span><br><span class=\"line\">            CONTAINER,</span><br><span class=\"line\">            APPLICATION</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * The authentication type to use for this resource.</span><br><span class=\"line\">     * This may be specified for resources representing a</span><br><span class=\"line\">     * connection factory of any supported type, and must</span><br><span class=\"line\">     * not be specified for resources of other types.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    AuthenticationType authenticationType() default AuthenticationType.CONTAINER;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Indicates whether this resource can be shared between</span><br><span class=\"line\">     * this component and other components.</span><br><span class=\"line\">     * This may be specified for resources representing a</span><br><span class=\"line\">     * connection factory of any supported type, and must</span><br><span class=\"line\">     * not be specified for resources of other types.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    boolean shareable() default true;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * A product specific name that this resource should be mapped to.</span><br><span class=\"line\">     * The name of this resource, as defined by the &lt;code&gt;name&lt;/code&gt;</span><br><span class=\"line\">     * element or defaulted, is a name that is local to the application</span><br><span class=\"line\">     * component using the resource.  (It&apos;s a name in the JNDI</span><br><span class=\"line\">     * &lt;code&gt;java:comp/env&lt;/code&gt; namespace.)  Many application servers</span><br><span class=\"line\">     * provide a way to map these local names to names of resources</span><br><span class=\"line\">     * known to the application server.  This mapped name is often a</span><br><span class=\"line\">     * &lt;i&gt;global&lt;/i&gt; JNDI name, but may be a name of any form. &lt;p&gt;</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * Application servers are not required to support any particular</span><br><span class=\"line\">     * form or type of mapped name, nor the ability to use mapped names.</span><br><span class=\"line\">     * The mapped name is product-dependent and often installation-dependent.</span><br><span class=\"line\">     * No use of a mapped name is portable.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String mappedName() default &quot;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * Description of this resource.  The description is expected</span><br><span class=\"line\">     * to be in the default language of the system on which the</span><br><span class=\"line\">     * application is deployed.  The description can be presented</span><br><span class=\"line\">     * to the Deployer to help in choosing the correct resource.</span><br><span class=\"line\">     */</span><br><span class=\"line\">    String description() default &quot;&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>Autowried注解，首先根据类型匹配，如果类型匹配到多个，那么在根据属性名和bean的id进行匹配(可以由Qualifier注解强制匹配指定的bean id)。Resource注解则顺序不同，它有如下几种可能的情况：</p>\n<pre><code>* Resource注解指定了name属性和type属性</code></pre><p>策略：首先进行按名称匹配策略： 匹配name属性和bean的id，如果匹配，则判断查找到的bean是否是type属性指定的类型，如果是type属性指定的类型，则匹配成功。如果不是<strong><strong>type属性指定的类型</strong></strong>，则抛出异常，提示匹配失败；如果name属性跟bean的id不匹配，则抛出异常提示没有bean的id匹配name属性</p>\n<pre><code>* Resource注解指定了name属性，未指定type属性</code></pre><p>策略：查找bean的id为name属性的bean，查找到，不关心类型为什么，都是匹配成功；如果找不到name属性指定的bean id，则匹配失败，抛出异常</p>\n<pre><code>* Resource注解指定了type属性，未指定name属性</code></pre><p>策略：首先进行按名称匹配策略： 匹配属性名和bean的id，如果匹配，则判断查找到的bean是否是type属性指定的类型，如果是type属性指定的类型，则匹配成功。如果不是<strong><strong>type属性指定的类型</strong></strong>，则抛出异常，提示匹配失败；其次进行按类型匹配策略： 如果属性名跟bean的id不匹配，则查找类型为type的bean，如果仅仅找到一个，自动装配成功，其它情况失败。</p>\n<pre><code>* Resource注解未指定type属性和name属性</code></pre><p>策略：首先进行按属性名匹配策略，匹配则注入成功；如果属性名不匹配，则进行类型匹配策略，只有为一个类型匹配才成功，其他情况都失败</p>\n<h3 id=\"作者注：欢迎关注笔者公号，定期分享IT互联网、金融等工作经验心得、人生感悟，欢迎交流，目前就职阿里-移动事业部，需要大厂内推的也可到公众号砸简历，或查看我个人资料获取。（公号ID：weknow619）。\"><a href=\"#作者注：欢迎关注笔者公号，定期分享IT互联网、金融等工作经验心得、人生感悟，欢迎交流，目前就职阿里-移动事业部，需要大厂内推的也可到公众号砸简历，或查看我个人资料获取。（公号ID：weknow619）。\" class=\"headerlink\" title=\"作者注：欢迎关注笔者公号，定期分享IT互联网、金融等工作经验心得、人生感悟，欢迎交流，目前就职阿里-移动事业部，需要大厂内推的也可到公众号砸简历，或查看我个人资料获取。（公号ID：weknow619）。\"></a>作者注：欢迎关注笔者公号，定期分享IT互联网、金融等工作经验心得、人生感悟，欢迎交流，目前就职阿里-移动事业部，需要大厂内推的也可到公众号砸简历，或查看我个人资料获取。（公号ID：weknow619）。</h3><p><img src=\"https://user-gold-cdn.xitu.io/2018/9/9/165bc4a503dfcc18?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n","categories":[],"tags":[{"name":"Java","slug":"Java","count":26,"path":"api/tags/Java.json"},{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}]}