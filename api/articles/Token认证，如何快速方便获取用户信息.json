{"title":"Token认证，如何快速方便获取用户信息","slug":"Token认证，如何快速方便获取用户信息","date":"2019-05-20T06:31:29.029Z","updated":"2019-05-30T00:52:25.414Z","comments":true,"path":"api/articles/Token认证，如何快速方便获取用户信息.json","photos":[],"link":"","excerpt":"","covers":["https://user-gold-cdn.xitu.io/2019/5/19/16ace69edcd28f75?imageView2/0/w/1280/h/960/ignore-error/1","https://user-gold-cdn.xitu.io/2019/5/19/16ace69edcc90ca7?imageView2/0/w/1280/h/960/ignore-error/1","https://user-gold-cdn.xitu.io/2019/5/15/16ab91d71d2ab715?imageView2/0/w/1280/h/960/ignore-error/1"],"content":"<blockquote>\n<p>本文转载自 <a href=\"https://juejin.im/post/5ce0dfb45188250c942f6c1d\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5ce0dfb45188250c942f6c1d</a> </p>\n</blockquote>\n<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>我们有一个Web项目，这个项目提供了很多的Rest API。也做了权限控制，访问API的请求必须要带上事先认证后获取的Token才可以。</p>\n<p>认证的话就在Filter中进行的，会获取请求的Token进行验证，如果成功了可以得到Token中的用户信息，本文的核心就是讲解如何将用户信息（用户ID）优雅的传递给API接口（Controller）。</p>\n<h1 id=\"方式一（很挫）\"><a href=\"#方式一（很挫）\" class=\"headerlink\" title=\"方式一（很挫）\"></a>方式一（很挫）</h1><p>我们在Filter中进行了统一拦截，在Controller中获取用户ID的话，仍然可以再次解析一遍Token获取用户ID</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">public String test(HttpServletRequest request) &#123;</span><br><span class=\"line\">    String token = request.getHeader(&quot;token&quot;);</span><br><span class=\"line\">    JWTResult result = JWTUtils.checkToken(token);</span><br><span class=\"line\">    Long userId = result.getUserId();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"方式二（优雅）\"><a href=\"#方式二（优雅）\" class=\"headerlink\" title=\"方式二（优雅）\"></a>方式二（优雅）</h1><p>方式一需要重新解析一遍Token, 浪费资源。我们可以直接将Filter中解析好了的用户ID直接通过Header传递给接口啊。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class=\"line\">\t\t\tthrows IOException, ServletException &#123;</span><br><span class=\"line\">    HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class=\"line\">\tHttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class=\"line\">    String token = request.getHeader(&quot;token&quot;);</span><br><span class=\"line\">    JWTResult result = JWTUtils.checkToken(token);</span><br><span class=\"line\">    Long userId = result.getUserId();</span><br><span class=\"line\">\tHttpServletRequestWrapper requestWrapper = new HttpServletRequestWrapper(httpRequest) &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic String getHeader(String name) &#123;</span><br><span class=\"line\">\t\t\tif (name.equals(&quot;loginUserId&quot;)) &#123;</span><br><span class=\"line\">\t\t\t\treturn userId .toString();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturn super.getHeader(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tchain.doFilter(requestWrapper, httpResponse);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>接口中直接从Header中获取解析好了的用户ID:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">public String save2(HttpServletRequest request) &#123;</span><br><span class=\"line\">\tLong userId = Long.parseLong(request.getHeader(&quot;loginUserId&quot;));\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"方式三（很优雅）\"><a href=\"#方式三（很优雅）\" class=\"headerlink\" title=\"方式三（很优雅）\"></a>方式三（很优雅）</h1><p>通过Header传递确实很方便，但如果你有代码洁癖的话总会觉得怪怪的，能不能不用Header方式，比如说我就在方法上定义一个loginUserId的参数，你给我直接注入进来，这个有点意思哈，下面我们来实现下：</p>\n<h3 id=\"GET参数方式\"><a href=\"#GET参数方式\" class=\"headerlink\" title=\"GET参数方式\"></a>GET参数方式</h3><p>在Filter中追加参数：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class=\"line\">\t\t\tthrows IOException, ServletException &#123;</span><br><span class=\"line\">    HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class=\"line\">\tHttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class=\"line\">    String token = request.getHeader(&quot;token&quot;);</span><br><span class=\"line\">    JWTResult result = JWTUtils.checkToken(token);</span><br><span class=\"line\">    Long userId = result.getUserId();</span><br><span class=\"line\">\tHttpServletRequestWrapper requestWrapper = new HttpServletRequestWrapper(httpRequest) &#123;</span><br><span class=\"line\">\t\t    @Override</span><br><span class=\"line\">\t\t\tpublic String[] getParameterValues(String name) &#123;</span><br><span class=\"line\">\t\t\t\tif (name.equals(&quot;loginUserId&quot;)) &#123;</span><br><span class=\"line\">\t\t\t\t\treturn new String[] &#123; userId .toString() &#125;;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\treturn super.getParameterValues(name);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic Enumeration&lt;String&gt; getParameterNames() &#123;</span><br><span class=\"line\">\t\t\t\tSet&lt;String&gt; paramNames = new LinkedHashSet&lt;&gt;();</span><br><span class=\"line\">\t\t\t\tparamNames.add(&quot;loginUserId&quot;);</span><br><span class=\"line\">\t\t\t\tEnumeration&lt;String&gt; names =  super.getParameterNames();</span><br><span class=\"line\">\t\t\t\twhile(names.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\t\tparamNames.add(names.nextElement());</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\treturn Collections.enumeration(paramNames);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tchain.doFilter(requestWrapper, httpResponse);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>接口中直接填写参数即可获取：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@GetMapping(&quot;/hello&quot;)</span><br><span class=\"line\">public String save2(String name, Long loginUserId) &#123;</span><br><span class=\"line\">\t// loginUserId 就是Filter中追加的值</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>对于post请求，也可以用这种方式：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@PostMapping(&quot;/hello&quot;)</span><br><span class=\"line\">public String save2(User user, Long loginUserId) &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>可是往往我们在用post请求的时候，要么就是表单提交，要么就是json体的方式提交，一般不会使用get方式参数，这也就意味着这个loginUserId我们需要注入到对象中：</p>\n<p>先创建一个参数实体类:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class User &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprivate String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tprivate Long loginUserId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>先模拟表单提交的方式，看看行不行：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@PostMapping(&quot;/hello&quot;)</span><br><span class=\"line\">public User save2(User user) &#123;</span><br><span class=\"line\">\treturn user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>用PostMan测试一下，表单方式是直接支持的：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/5/19/16ace69edcd28f75?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n<p>再次试下Json提交方式：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@PostMapping(&quot;/hello&quot;)</span><br><span class=\"line\">public User save2(@RequestBody User user) &#123;</span><br><span class=\"line\">\treturn user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>看下图，失败了，得重新想办法实现下</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/5/19/16ace69edcc90ca7?imageView2/0/w/1280/h/960/ignore-error/1\" alt></p>\n<p>只需要在HttpServletRequestWrapper中重新对提交的内容进行修改即可：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class=\"line\">\tbyte[] requestBody = new byte[0];</span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t\trequestBody = StreamUtils.copyToByteArray(request.getInputStream());</span><br><span class=\"line\">\t\tMap map = JsonUtils.toBean(Map.class, new String(requestBody));</span><br><span class=\"line\">\t\tmap.put(&quot;loginUserId&quot;, loginUserId);</span><br><span class=\"line\">\t\trequestBody = JsonUtils.toJson(map).getBytes();</span><br><span class=\"line\">\t&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\t\tthrow new RuntimeException(e);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfinal ByteArrayInputStream bais = new ByteArrayInputStream(requestBody);</span><br><span class=\"line\">\treturn new ServletInputStream() &#123;</span><br><span class=\"line\">\t\t @Override</span><br><span class=\"line\">\t\t  public int read() throws IOException &#123;</span><br><span class=\"line\">\t\t       return bais.read();</span><br><span class=\"line\">\t\t  &#125;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t  @Override</span><br><span class=\"line\">\t\t   public boolean isFinished() &#123;</span><br><span class=\"line\">\t\t       return false;</span><br><span class=\"line\">\t\t   &#125;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t   @Override</span><br><span class=\"line\">\t\t   public boolean isReady() &#123;</span><br><span class=\"line\">\t\t        return true;</span><br><span class=\"line\">\t\t   &#125;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t   @Override</span><br><span class=\"line\">\t\t    public void setReadListener(ReadListener listener) &#123;</span><br><span class=\"line\">\t\t </span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>到此为止，我们就可以直接将Token解析的用户ID直接注入到参数中了，不用去Header中获取，是不是很方便。</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/5/15/16ab91d71d2ab715?imageView2/0/w/1280/h/960/ignore-error/1\" alt=\"猿天地\"></p>\n","categories":[],"tags":[{"name":"Java","slug":"Java","count":26,"path":"api/tags/Java.json"}]}